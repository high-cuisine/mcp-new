import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, On, Command } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';

import { PaginationHelper, PaginationButton } from '../helpers/pagination.helper';
import { DateTimeHelper } from '../helpers/date-time.helper';
import { CrmService } from '../../crm/services/crm.service';
import { AppointmentService } from '../../crm/services/appointments.service';
import { ClientService } from '../../crm/services/client.service';
import { Admission } from '@common/entities/admission.entity';

interface ShowAppointmentSession {
  step: 'phone' | 'phone_input' | 'show_appointments';
  phone?: string;
  client?: any;
  appointments?: Admission[];
  currentPage?: number;
}

@Injectable()
@Scene('show_appointment')
export class ShowAppointmentScene {
  constructor(
    private readonly crmService: CrmService,
    private readonly appointmentService: AppointmentService,
    private readonly clientService: ClientService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['showAppointment']) {
      ctx.session['showAppointment'] = {} as ShowAppointmentSession;
    }
    
    const session = ctx.session['showAppointment'] as ShowAppointmentSession;
    
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    session.step = 'phone';
    await ctx.replyWithHTML(`
üìÖ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º</b>

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_show_appointment')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['showAppointment']) {
      ctx.session['showAppointment'] = {} as ShowAppointmentSession;
    }
    
    const session = ctx.session['showAppointment'] as ShowAppointmentSession;
    const text = (ctx.message as any).text;
    
    if(text === '/exit') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π');
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'phone':
      case 'phone_input':
        session.phone = text;
        await this.findClientAndAppointments(ctx, session);
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;
    
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['showAppointment']) {
      ctx.session['showAppointment'] = {} as ShowAppointmentSession;
    }
    
    const session = ctx.session['showAppointment'] as ShowAppointmentSession;
    
    if (callbackData === 'cancel_show_appointment') {
      await ctx.reply('‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –æ—Ç–º–µ–Ω–µ–Ω');
      await ctx.scene.leave();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
    if (callbackData.startsWith('page_')) {
      const pageNumber = parseInt(callbackData.replace('page_', ''), 10);
      if (!isNaN(pageNumber) && pageNumber > 0) {
        session.currentPage = pageNumber;
        await this.showAppointmentsList(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
    if (callbackData === 'retry_search') {
      await ctx.replyWithHTML(`
<b>–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (callbackData === 'try_another_phone') {
      await ctx.replyWithHTML(`
<b>–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }
  }


  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∑–∞–ø–∏—Å–∏
   */
  private async findClientAndAppointments(ctx: SceneContext, session: ShowAppointmentSession) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const clientResult = await this.clientService.getClinetByPhone(session.phone!);
      console.log(clientResult, 'clientResult');
      if (!clientResult || !(clientResult as any).data || !(clientResult as any).data.client || (clientResult as any).data.client.length === 0) {
        await ctx.replyWithHTML(`
‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${session.phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_show_appointment')]
          ])
        );
        return;
      }

      session.client = (clientResult as any).data.client[0];
      const clientId = session.client?.id || session.client?.client_id;
      const crmClientId = typeof clientId === 'number' ? clientId : parseInt(clientId);
      
      if (isNaN(crmClientId)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const appointments = await this.appointmentService.findAppointmentForUser(crmClientId, 1);
      
      if (!appointments || appointments.length === 0) {
        await ctx.replyWithHTML(`
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:</b> ${session.client?.first_name} ${session.client?.last_name}

‚ùå <b>–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º.

–í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_show_appointment')]
          ])
        );
        await ctx.scene.leave();
        return;
      }

      session.appointments = appointments;
      session.step = 'show_appointments';
      await this.showAppointmentsList(ctx, session);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å–µ–π:', error);
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_search')],
          [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_show_appointment')]
        ])
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showAppointmentsList(ctx: SceneContext, session: ShowAppointmentSession) {
    if (!session.appointments || session.appointments.length === 0) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      await ctx.scene.leave();
      return;
    }

    const appointments = session.appointments;
    const currentPage = session.currentPage || 1;
    const itemsPerPage = 5;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—è–º–∏
    const clientName = session.client?.first_name && session.client?.last_name 
      ? `${session.client.first_name} ${session.client.last_name}`
      : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const phone = session.phone || session.client?.cell_phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, appointments.length);
    const pageAppointments = appointments.slice(startIndex, endIndex);

    let message = `<b>üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º</b>\n\n`;
    message += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientName}\n`;
    if (phone !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
      message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
    }
    message += `\nüìä <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> ${appointments.length}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pageAppointments.forEach((appointment, index) => {
      const appointmentDate = new Date(appointment.admission_date);
      const formattedDate = DateTimeHelper.formatDateDisplay(appointmentDate);
      const formattedTime = appointmentDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Moscow'
      });

      message += `${startIndex + index + 1}. <b>${formattedDate}</b> –≤ <b>${formattedTime}</b>\n`;
      
      if ((appointment as any).client?.id) {
        const pet = (appointment as any).pet;
        if (pet && pet.alias) {
          message += `   üêæ –ü–∏—Ç–æ–º–µ—Ü: ${pet.alias}\n`;
        }
      }
      
      if (appointment.description) {
        message += `   üìù ${appointment.description}\n`;
      }
      
      message += `   üÜî ID: ${appointment.id}\n\n`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalPages = Math.ceil(appointments.length / itemsPerPage);
    if (totalPages > 1) {
      message += `\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const buttons: any[] = [];
    
    if (totalPages > 1) {
      const pageButtons: any[] = [];
      
      if (currentPage > 1) {
        pageButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${currentPage - 1}`));
      }
      
      if (currentPage < totalPages) {
        pageButtons.push(Markup.button.callback('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', `page_${currentPage + 1}`));
      }
      
      if (pageButtons.length > 0) {
        buttons.push(pageButtons);
      }
    }
    
    buttons.push([Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'cancel_show_appointment')]);

    await ctx.replyWithHTML(message, Markup.inlineKeyboard(buttons));
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π');
    await ctx.scene.leave();
  }
}
