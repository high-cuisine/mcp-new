import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, On, Command, Hears } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';

import { addCancelButton, handleCancelButton } from '../helpers/scene.helper';
import { PaginationHelper, PaginationButton } from '../helpers/pagination.helper';
import { DateTimeHelper, DateSlot, TimeSlot } from '../helpers/date-time.helper';
import { CrmService } from '../../crm/services/crm.service';
import { ClinicService } from '../../crm/services/clinic.service';
import { PetService } from '../../crm/services/pet.service';
import { ClientService } from '../../crm/services/client.service';

interface AppointmentCreateSession {
  step: 'symptoms' | 'pet_name' | 'pet_breed' | 'owner_phone' | 'owner_name' | 'appointment_type' | 'date' | 'time' | 'clinic' | 'doctor';
  symptoms?: string;
  petName?: string;
  petBreed?: string;
  ownerPhone?: string;
  ownerName?: string;
  appointmentType?: 'primary' | 'secondary' | 'vaccination';
  date?: string;
  time?: string;
  clinicId?: string;
  doctorId?: string;
  currentDatePage?: number;
  currentTimePage?: number;
  needToCreatePet?: boolean;
  needToCreateClient?: boolean;
}

@Injectable()
@Scene('create_appointment')
export class CreateAppointmentScene {
  constructor(
    private readonly crmService: CrmService,
    private readonly clinicService: ClinicService,
    private readonly petService: PetService,
    private readonly clientService: ClientService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['createAppointment']) {
      ctx.session['createAppointment'] = {} as AppointmentCreateSession;
    }
    
    const session = ctx.session['createAppointment'] as AppointmentCreateSession;
    session.step = 'symptoms';
    
    await ctx.replyWithHTML(`
üêæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º</b>

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!

<b>–®–∞–≥ 1/9: –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥—É–≥–∞</b>

–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–µ–¥—É–≥ –∏–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –ø–∏—Ç–æ–º—Ü–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–∞—á–∞.`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['createAppointment']) {
      ctx.session['createAppointment'] = {} as AppointmentCreateSession;
    }
    
    const session = ctx.session['createAppointment'] as AppointmentCreateSession;
    const text = (ctx.message as any).text;
    
    if(text === '/exit') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏');
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'symptoms':
        session.symptoms = text;
        session.step = 'pet_name';
        await ctx.replyWithHTML(`
‚úÖ <b>–°–∏–º–ø—Ç–æ–º—ã:</b> ${text}

<b>–®–∞–≥ 2/9: –ö–∞–∫–æ–π –ø–∏—Ç–æ–º–µ—Ü?</b>

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –≤–∏–¥ –ø–∏—Ç–æ–º—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–∞—Ä—Å–∏–∫, –∫–æ—Ç" –∏–ª–∏ "–†–µ–∫—Å, —Å–æ–±–∞–∫–∞")`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
          ])
        );
        break;

      case 'pet_name':
        session.petName = text;
        session.step = 'pet_breed';
        await ctx.replyWithHTML(`
‚úÖ <b>–ü–∏—Ç–æ–º–µ—Ü:</b> ${text}

<b>–®–∞–≥ 3/10: –ü–æ—Ä–æ–¥–∞ –ø–∏—Ç–æ–º—Ü–∞</b>

–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ø–∏—Ç–æ–º—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±—Ä–∏—Ç–∞–Ω—Å–∫–∞—è", "–∫–æ—Ä–≥–∏", "–ø–µ—Ä—Å–∏–¥—Å–∫–∞—è", "–º–µ—Ç–∏—Å")`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
          ])
        );
        break;

      case 'pet_breed':
        session.petBreed = text;
        session.step = 'owner_phone';
        await ctx.replyWithHTML(`
‚úÖ <b>–ü–∏—Ç–æ–º–µ—Ü:</b> ${session.petName}
‚úÖ <b>–ü–æ—Ä–æ–¥–∞:</b> ${text}

<b>–®–∞–≥ 4/10: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
          ])
        );
        break;

      case 'owner_phone':
        session.ownerPhone = text;
        session.step = 'owner_name';
        await ctx.replyWithHTML(`
‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${text}

<b>–®–∞–≥ 5/10: –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
          ])
        );
        break;

      case 'owner_name':
        session.ownerName = text;
        session.step = 'appointment_type';
        await ctx.replyWithHTML(`
‚úÖ <b>–§–ò–û:</b> ${text}

<b>–®–∞–≥ 6/10: –¢–∏–ø –ø—Ä–∏–µ–º–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞:`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('ü©∫ –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º', 'appointment_primary')],
            [Markup.button.callback('üîÑ –í—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–∏–µ–º', 'appointment_secondary')],
            [Markup.button.callback('üíâ –ù–∞ –ø—Ä–∏–≤–∏–≤–∫—É', 'appointment_vaccination')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
          ])
        );
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;
    
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['createAppointment']) {
      ctx.session['createAppointment'] = {} as AppointmentCreateSession;
    }
    
    const session = ctx.session['createAppointment'] as AppointmentCreateSession;
    
    if (callbackData === 'cancel_appointment') {
      await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.scene.leave();
      return;
    }

    if (callbackData.startsWith('appointment_')) {
      const type = callbackData.replace('appointment_', '') as 'primary' | 'secondary' | 'vaccination';
      session.appointmentType = type;
      session.step = 'date';
      
      const typeNames = {
        primary: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º',
        secondary: '–í—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–∏–µ–º', 
        vaccination: '–ù–∞ –ø—Ä–∏–≤–∏–≤–∫—É'
      };

      await this.showDateSelection(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç
    if (PaginationHelper.isPageCallback(callbackData)) {
      const pageNumber = PaginationHelper.parsePageCallback(callbackData);
      if (pageNumber) {
        session.currentDatePage = pageNumber;
        await this.showDateSelection(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if (DateTimeHelper.isDateCallback(callbackData)) {
      const selectedDate = DateTimeHelper.parseDateCallback(callbackData);
      if (selectedDate) {
        session.date = selectedDate;
        session.step = 'time';
        await this.showTimeSelection(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    if (callbackData.startsWith('time_page_')) {
      const pageNumber = parseInt(callbackData.replace('time_page_', ''), 10);
      session.currentTimePage = pageNumber;
      await this.showTimeSelection(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (DateTimeHelper.isTimeCallback(callbackData)) {
      const selectedTime = DateTimeHelper.parseTimeCallback(callbackData);
      if (selectedTime) {
        session.time = selectedTime;
        session.step = 'clinic';
        await this.showClinicSelection(ctx, session);
        return;
      }
    }

    if (callbackData.startsWith('clinic_')) {
      session.clinicId = callbackData;
      await this.askAboutDoctor(ctx, session);
      return;
    }

    if (callbackData.startsWith('doctor_')) {
      if (callbackData === 'doctor_auto') {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –≤—Ä–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
        session.doctorId = 'auto_selected';
        await this.selectDoctorBySymptoms(ctx, session);
      } else if (callbackData === 'doctor_manual') {
        // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –≤—Ä–∞—á–∞
        session.doctorId = 'manual_selection';
        await this.showManualDoctorSelection(ctx, session);
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
    if (callbackData.startsWith('select_doctor_')) {
      const doctorId = callbackData.replace('select_doctor_', '');
      session.doctorId = doctorId;
      await this.completeAppointment(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if (callbackData === 'confirm_appointment') {
      await this.completeAppointment(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if (callbackData === 'retry_appointment') {
      await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ...');
      await this.onSceneEnter(ctx);
      return;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showDateSelection(ctx: SceneContext, session: AppointmentCreateSession) {
    try {
      const availableDates = await this.crmService.getAvailableDates(14, parseInt(session.clinicId!));
      const dateSlots: DateSlot[] = availableDates.map(dateInfo => ({
        date: dateInfo.date,
        displayName: DateTimeHelper.formatDateDisplay(new Date(dateInfo.date)),
        availableSlots: 9 - dateInfo.occupiedSlots.length, // 9 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã - –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        totalSlots: 9
      }));

      const dateButtons = DateTimeHelper.createDateButtons(dateSlots);
      const currentPage = session.currentDatePage || 1;

      const typeNames = {
        primary: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º',
        secondary: '–í—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–∏–µ–º', 
        vaccination: '–ù–∞ –ø—Ä–∏–≤–∏–≤–∫—É'
      };

      const message = `
‚úÖ <b>–¢–∏–ø –ø—Ä–∏–µ–º–∞:</b> ${typeNames[session.appointmentType!]}

<b>–®–∞–≥ 7/10: –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:`;

      await PaginationHelper.sendPaginatedMessage(
        ctx,
        message,
        dateButtons,
        currentPage,
        {
          itemsPerPage: 5,
          showPageNumbers: true,
          showNavigation: true,
          cancelButtonText: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
          cancelCallbackData: 'cancel_appointment'
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showTimeSelection(ctx: SceneContext, session: AppointmentCreateSession) {
    try {
      const occupiedSlots = await this.crmService.getOccupiedTimeSlots(session.date!);
      const timeSlots = DateTimeHelper.generateTimeSlots(session.date!, occupiedSlots);
      const timeButtons = DateTimeHelper.createTimeButtons(timeSlots);
      const currentPage = session.currentTimePage || 1;

      const dateDisplay = DateTimeHelper.formatDateDisplay(new Date(session.date!));

      const message = `
‚úÖ <b>–î–∞—Ç–∞:</b> ${dateDisplay}

<b>–®–∞–≥ 8/10: –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:`;

      await PaginationHelper.sendPaginatedMessage(
        ctx,
        message,
        timeButtons,
        currentPage,
        {
          itemsPerPage: 6,
          showPageNumbers: true,
          showNavigation: true,
          cancelButtonText: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
          cancelCallbackData: 'cancel_appointment'
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∏–Ω–∏–∫–∏
   */
  private async showClinicSelection(ctx: SceneContext, session: AppointmentCreateSession) {
    const dateDisplay = DateTimeHelper.formatDateDisplay(new Date(session.date!));
    const timeDisplay = session.time;

    const clinics = await this.clinicService.getClinics();
    const buttons: any[][] = [];  
    for(const clinic of clinics.data.clinics) {
      buttons.push([Markup.button.callback(`üè• ${clinic.title}`, `clinic_${clinic.id}`)]);
    }
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]);

    await ctx.replyWithHTML(`‚úÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${dateDisplay} –≤ ${timeDisplay}
<b>–®–∞–≥ 9/10: –í—ã–±–æ—Ä –∫–ª–∏–Ω–∏–∫–∏</b>
–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É:`, Markup.inlineKeyboard(buttons));
  }

  private async askAboutDoctor(ctx: SceneContext, session: AppointmentCreateSession) {
    await ctx.replyWithHTML(`
‚úÖ <b>–ö–ª–∏–Ω–∏–∫–∞:</b> ${session.clinicId}

<b>–®–∞–≥ 10/10: –í—ã–±–æ—Ä –≤—Ä–∞—á–∞</b>

–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ "${session.symptoms}" –º—ã –ø–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–∞—á–∞.`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –≤—Ä–∞—á–∞', 'doctor_auto')],
        [Markup.button.callback('üë®‚Äç‚öïÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞ –≤—Ä—É—á–Ω—É—é', 'doctor_manual')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
      ])
    );
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –≤—Ä–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
   */
  private async selectDoctorBySymptoms(ctx: SceneContext, session: AppointmentCreateSession) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
      const doctors = await this.crmService.getDoctors();
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
      // –ü–æ–∫–∞ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–∞—á–∞
      const selectedDoctor = doctors.data.userPosition[0];
      
      session.doctorId = selectedDoctor.id.toString();
      
      await ctx.replyWithHTML(`
‚úÖ <b>–í—Ä–∞—á –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b> ${selectedDoctor.title}

–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ "${session.symptoms}" —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –≤—Ä–∞—á: ${selectedDoctor.title}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞: ${selectedDoctor.admission_length}

–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', 'confirm_appointment')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]
        ])
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–∞—á–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –≤—Ä–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞ –≤—Ä—É—á–Ω—É—é.');
      await this.showManualDoctorSelection(ctx, session);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –≤—Ä–∞—á–∞
   */
  private async showManualDoctorSelection(ctx: SceneContext, session: AppointmentCreateSession) {
    try {
      const doctors = await this.crmService.getDoctors();
      const buttons: any[][] = [];
      
      for (const doctor of doctors.data.userPosition) {
        buttons.push([Markup.button.callback(
          `üë®‚Äç‚öïÔ∏è ${doctor.title} (${doctor.admission_length})`, 
          `select_doctor_${doctor.id}`
        )]);
      }
      
      buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_appointment')]);

      await ctx.replyWithHTML(`
‚úÖ <b>–í—ã–±–æ—Ä –≤—Ä–∞—á–∞ –≤—Ä—É—á–Ω—É—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–∞—á–∞:`, 
        Markup.inlineKeyboard(buttons)
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async completeAppointment(ctx: SceneContext, session: AppointmentCreateSession) {
    const dateDisplay = DateTimeHelper.formatDateDisplay(new Date(session.date!));
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ CRM —Å–∏—Å—Ç–µ–º–µ
      const appointmentResult = await this.createAppointmentInCRM(session);
      
      if (appointmentResult.success) {
        const petInfo = session.needToCreatePet 
          ? `üêæ <b>–ü–∏—Ç–æ–º–µ—Ü:</b> ${session.petName} (${session.petBreed}) - <i>—Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>`
          : `üêæ <b>–ü–∏—Ç–æ–º–µ—Ü:</b> ${session.petName}`;

        const clientInfo = session.needToCreateClient
          ? `üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${session.ownerName} - <i>—Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>`
          : `üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${session.ownerName}`;

        await ctx.replyWithHTML(`
üéâ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞!</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>
${petInfo}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${session.ownerPhone}
${clientInfo}
ü©∫ <b>–¢–∏–ø –ø—Ä–∏–µ–º–∞:</b> ${session.appointmentType}
üìÖ <b>–î–∞—Ç–∞:</b> ${dateDisplay}
üïê <b>–í—Ä–µ–º—è:</b> ${session.time}
üè• <b>–ö–ª–∏–Ω–∏–∫–∞:</b> ${session.clinicId}
üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á:</b> ${session.doctorId}
üìù <b>–°–∏–º–ø—Ç–æ–º—ã:</b> ${session.symptoms}

‚úÖ <b>ID –∑–∞–ø–∏—Å–∏:</b> ${appointmentResult.data?.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      } else {
        await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏</b>

${appointmentResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_appointment')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_appointment')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      );
    }
    
    await ctx.scene.leave();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ CRM —Å–∏—Å—Ç–µ–º–µ
   */
  private async createAppointmentInCRM(session: AppointmentCreateSession) {
    try {
      // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –Ω–∞ type_id
      const typeMapping = {
        'primary': 1,      // –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º
        'secondary': 2,    // –í—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–∏–µ–º  
        'vaccination': 3   // –ü—Ä–∏–≤–∏–≤–∫–∞
      };

      const clientPhone = session.ownerPhone?.replace(/\D/g, '');

      const client = await this.crmService.getClientByPhone(String(clientPhone));

      let clientId: number;
      let clientData: any;

      if(!client.data || !client.data.client || client.data.client.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
        try {
          // –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏
          const nameParts = session.ownerName!.split(' ');
          const lastName = nameParts[0] || '';
          const firstName = nameParts[1] || '';
          const middleName = nameParts[2] || '';

          const createdClient = await this.clientService.createClient(
            lastName,
            firstName,
            middleName,
            session.ownerPhone!
          );

          console.log('Created client response:', JSON.stringify(createdClient, null, 2));

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
          if (createdClient.success && createdClient.data?.client_id) {
            clientId = createdClient.data.client_id;
            clientData = { client_id: clientId, pets: [] };
            session.needToCreateClient = true;
          } else if (createdClient.client_id) {
            // –ï—Å–ª–∏ client_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
            clientId = createdClient.client_id;
            clientData = { client_id: clientId, pets: [] };
            session.needToCreateClient = true;
          } else if (createdClient.data?.client_id) {
            // –ï—Å–ª–∏ client_id –≤ data –±–µ–∑ –ø–æ–ª—è success
            clientId = createdClient.data.client_id;
            clientData = { client_id: clientId, pets: [] };
            session.needToCreateClient = true;
          } else if (createdClient.message && createdClient.message.includes('Created')) {
            // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (—Å–æ–æ–±—â–µ–Ω–∏–µ "Record(s) Created"), –Ω–æ –Ω–µ—Ç client_id –≤ –æ—Ç–≤–µ—Ç–µ
            // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID
            try {
              const clientPhone = session.ownerPhone!.replace(/\D/g, '');
              const foundClient = await this.crmService.getClientByPhone(clientPhone);
              
              if (foundClient.data && foundClient.data.client && foundClient.data.client.length > 0) {
                clientData = foundClient.data.client[0];
                clientId = clientData.client_id || clientData.id;
                session.needToCreateClient = true;
              } else {
                return {
                  success: false,
                  message: '–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID'
                };
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', error);
              return {
                success: false,
                message: '–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö'
              };
            }
          } else {
            return {
              success: false,
              message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${createdClient.message || JSON.stringify(createdClient)}`
            };
          }

          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ clientId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
          if (!clientId || isNaN(clientId)) {
            return {
              success: false,
              message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞'
            };
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
          return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          };
        }
      } else {
        clientData = client.data.client[0];
        clientId = clientData.client_id;
      }

      let petId: number;
      
      if(!clientData.pets || clientData.pets.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞, –µ—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤
        try {
          const createdPet = await this.petService.createPetg(
            clientId,
            session.petName!,
            1, // type_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞)
            session.petBreed!
          );
          
          console.log('Created pet response:', JSON.stringify(createdPet, null, 2));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
          if (createdPet.success && createdPet.data?.pet_id) {
            petId = createdPet.data.pet_id;
            session.needToCreatePet = true;
          } else if (createdPet.pet_id) {
            petId = createdPet.pet_id;
            session.needToCreatePet = true;
          } else if (createdPet.data?.pet_id) {
            petId = createdPet.data.pet_id;
            session.needToCreatePet = true;
          } else if (createdPet.message && createdPet.message.includes('Created')) {
            // –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ—Ç pet_id –≤ –æ—Ç–≤–µ—Ç–µ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏
            try {
              const clientPhone = session.ownerPhone!.replace(/\D/g, '');
              const foundClient = await this.crmService.getClientByPhone(clientPhone);
              
              if (foundClient.data && foundClient.data.client && foundClient.data.client.length > 0) {
                const updatedClientData = foundClient.data.client[0];
                if (updatedClientData.pets && updatedClientData.pets.length > 0) {
                  const newPet = updatedClientData.pets.find((p: any) => p.alias === session.petName);
                  if (newPet && (newPet.pet_id || newPet.id)) {
                    petId = newPet.pet_id || newPet.id;
                    session.needToCreatePet = true;
                  } else {
                    return {
                      success: false,
                      message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID'
                    };
                  }
                } else {
                  return {
                    success: false,
                    message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞'
                  };
                }
              } else {
                return {
                  success: false,
                  message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞'
                };
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:', error);
              return {
                success: false,
                message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö'
              };
            }
          } else {
            return {
              success: false,
              message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞: ${createdPet.message || JSON.stringify(createdPet)}`
            };
          }
          
          if (!petId || isNaN(petId)) {
            return {
              success: false,
              message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞'
            };
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞:', error);
          return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          };
        }
      } else {
        const pet = clientData.pets.find(pet => pet.alias === session.petName);
        if(!pet) {
          // –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∫–ª–∏–µ–Ω—Ç–∞
          try {
            const createdPet = await this.petService.createPetg(
              clientId,
              session.petName!,
              1, // type_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              session.petBreed!
            );
            
            console.log('Created pet response:', JSON.stringify(createdPet, null, 2));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if (createdPet.success && createdPet.data?.pet_id) {
              petId = createdPet.data.pet_id;
              session.needToCreatePet = true;
            } else if (createdPet.pet_id) {
              petId = createdPet.pet_id;
              session.needToCreatePet = true;
            } else if (createdPet.data?.pet_id) {
              petId = createdPet.data.pet_id;
              session.needToCreatePet = true;
            } else if (createdPet.message && createdPet.message.includes('Created')) {
              // –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ—Ç pet_id –≤ –æ—Ç–≤–µ—Ç–µ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏
              try {
                const clientPhone = session.ownerPhone!.replace(/\D/g, '');
                const foundClient = await this.crmService.getClientByPhone(clientPhone);
                
                if (foundClient.data && foundClient.data.client && foundClient.data.client.length > 0) {
                  const updatedClientData = foundClient.data.client[0];
                  if (updatedClientData.pets && updatedClientData.pets.length > 0) {
                    const newPet = updatedClientData.pets.find((p: any) => p.alias === session.petName);
                    if (newPet && (newPet.pet_id || newPet.id)) {
                      petId = newPet.pet_id || newPet.id;
                      session.needToCreatePet = true;
                    } else {
                      return {
                        success: false,
                        message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID'
                      };
                    }
                  } else {
                    return {
                      success: false,
                      message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞'
                    };
                  }
                } else {
                  return {
                    success: false,
                    message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞'
                  };
                }
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:', error);
                return {
                  success: false,
                  message: '–ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö'
                };
              }
            } else {
              return {
                success: false,
                message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞: ${createdPet.message || JSON.stringify(createdPet)}`
              };
            }
            
            if (!petId || isNaN(petId)) {
              return {
                success: false,
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞'
              };
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞:', error);
            return {
              success: false,
              message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
            };
          }
        } else {
          petId = pet.pet_id;
        }
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è API
      const appointmentDateTime = `${session.date}T${session.time}:00`;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
      const admissionLength = 30;
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      const description = `–ü–∏—Ç–æ–º–µ—Ü: ${session.petName}\n–°–∏–º–ø—Ç–æ–º—ã: ${session.symptoms}\n–í–ª–∞–¥–µ–ª–µ—Ü: ${session.ownerName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${session.ownerPhone}`;

      const result = await this.crmService.createAppointment(
        typeMapping[session.appointmentType!], // type_id
        appointmentDateTime,                   // admission_date
        parseInt(session.clinicId!.replace('clinic_', '')), // clinic_id
        clientId,                                     // client_id (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        petId,                                     // patient_id (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        description,                           // description
        admissionLength,                      // admission_length
        parseInt(session.doctorId!)           // user_id (ID –≤—Ä–∞—á–∞)
      );

      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ CRM:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ'
      };
    }
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.replyWithHTML('–í—ã—Ö–æ–¥ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    await ctx.scene.leave();
  }
} 