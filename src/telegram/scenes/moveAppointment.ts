import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, On, Command } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';

import { PaginationHelper, PaginationButton } from '../helpers/pagination.helper';
import { DateTimeHelper, DateSlot, TimeSlot } from '../helpers/date-time.helper';
import { CrmService } from '../../crm/services/crm.service';
import { AppointmentService } from '../../crm/services/appointments.service';
import { ClientService } from '../../crm/services/client.service';
import { Admission } from '@common/entities/admission.entity';

interface MoveAppointmentSession {
  step: 'phone' | 'phone_input' | 'select_appointment' | 'select_date' | 'select_time' | 'confirm_move';
  phone?: string;
  client?: any;
  appointments?: Admission[];
  selectedAppointment?: Admission;
  selectedAppointmentId?: string;
  newDate?: string;
  newTime?: string;
  currentPage?: number;
  currentDatePage?: number;
  currentTimePage?: number;
}

@Injectable()
@Scene('move_appointment')
export class MoveAppointmentScene {
  constructor(
    private readonly crmService: CrmService,
    private readonly appointmentService: AppointmentService,
    private readonly clientService: ClientService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['moveAppointment']) {
      ctx.session['moveAppointment'] = {} as MoveAppointmentSession;
    }
    
    const session = ctx.session['moveAppointment'] as MoveAppointmentSession;
    session.step = 'phone';
    
    await ctx.replyWithHTML(`
üîÑ <b>–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º</b>

–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.

<b>–®–∞–≥ 1/6: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_move_appointment')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['moveAppointment']) {
      ctx.session['moveAppointment'] = {} as MoveAppointmentSession;
    }
    
    const session = ctx.session['moveAppointment'] as MoveAppointmentSession;
    const text = (ctx.message as any).text;
    
    if(text === '/exit') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏');
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'phone':
      case 'phone_input':
        session.phone = text;
        await this.findClientAndAppointments(ctx, session);
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;
    
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['moveAppointment']) {
      ctx.session['moveAppointment'] = {} as MoveAppointmentSession;
    }
    
    const session = ctx.session['moveAppointment'] as MoveAppointmentSession;
    
    if (callbackData === 'cancel_move_appointment') {
      await ctx.reply('‚ùå –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω');
      await ctx.scene.leave();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
    if (callbackData.startsWith('page_')) {
      const pageNumber = parseInt(callbackData.replace('page_', ''), 10);
      if (!isNaN(pageNumber) && pageNumber > 0) {
        session.currentPage = pageNumber;
        await this.showAppointmentsList(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç
    if (PaginationHelper.isPageCallback(callbackData)) {
      const pageNumber = PaginationHelper.parsePageCallback(callbackData);
      if (pageNumber) {
        session.currentDatePage = pageNumber;
        await this.showDateSelection(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    if (callbackData.startsWith('time_page_')) {
      const pageNumber = parseInt(callbackData.replace('time_page_', ''), 10);
      if (!isNaN(pageNumber) && pageNumber > 0) {
        session.currentTimePage = pageNumber;
        await this.showTimeSelection(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    if (callbackData.startsWith('move_appointment_')) {
      const appointmentId = callbackData.replace('move_appointment_', '');
      const selectedAppointment = session.appointments?.find(
        app => app.id.toString() === appointmentId
      );
      
      if (!selectedAppointment) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      session.selectedAppointment = selectedAppointment;
      session.selectedAppointmentId = appointmentId;
      session.step = 'select_date';
      await this.showDateSelection(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if (callbackData.startsWith('date_')) {
      const date = DateTimeHelper.parseDateCallback(callbackData);
      if (date) {
        session.newDate = date;
        session.step = 'select_time';
        await this.showTimeSelection(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (callbackData.startsWith('time_')) {
      const time = DateTimeHelper.parseTimeCallback(callbackData);
      if (time) {
        session.newTime = time;
        session.step = 'confirm_move';
        await this.showConfirmation(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    if (callbackData === 'confirm_move_appointment') {
      await this.moveAppointment(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (callbackData === 'back_to_time') {
      session.step = 'select_time';
      await this.showTimeSelection(ctx, session);
      return;
    }

    if (callbackData === 'back_to_date') {
      session.step = 'select_date';
      await this.showDateSelection(ctx, session);
      return;
    }

    if (callbackData === 'back_to_appointments') {
      session.step = 'select_appointment';
      await this.showAppointmentsList(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    if (callbackData === 'move_another_appointment') {
      await ctx.reply('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π...');
      session.step = 'select_appointment';
      session.selectedAppointmentId = undefined;
      session.selectedAppointment = undefined;
      session.newDate = undefined;
      session.newTime = undefined;
      await this.showAppointmentsList(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
    if (callbackData === 'retry_search') {
      await ctx.replyWithHTML(`
<b>–®–∞–≥ 1/6: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (callbackData === 'try_another_phone') {
      await ctx.replyWithHTML(`
<b>–®–∞–≥ 1/6: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∑–∞–ø–∏—Å–∏
   */
  private async findClientAndAppointments(ctx: SceneContext, session: MoveAppointmentSession) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const clientResult = await this.clientService.getClinetByPhone(session.phone!);
      if (!clientResult || !(clientResult as any).data || !(clientResult as any).data.client || (clientResult as any).data.client.length === 0) {
        await ctx.replyWithHTML(`
‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${session.phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_move_appointment')]
          ])
        );
        return;
      }

      session.client = (clientResult as any).data.client[0];
      const clientId = session.client?.id || session.client?.client_id;
      const crmClientId = typeof clientId === 'number' ? clientId : parseInt(clientId);
      
      if (isNaN(crmClientId)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const appointments = await this.appointmentService.findAppointmentForUser(crmClientId, 1);
      
      if (!appointments || appointments.length === 0) {
        await ctx.replyWithHTML(`
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:</b> ${session.client?.first_name} ${session.client?.last_name}

‚ùå <b>–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º.

–í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_move_appointment')]
          ])
        );
        return;
      }

      session.appointments = appointments;
      session.step = 'select_appointment';
      await this.showAppointmentsList(ctx, session);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å–µ–π:', error);
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_search')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_move_appointment')]
        ])
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showAppointmentsList(ctx: SceneContext, session: MoveAppointmentSession) {
    if (!session.appointments || session.appointments.length === 0) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const appointments = session.appointments;
    const currentPage = session.currentPage || 1;
    const itemsPerPage = 3;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π
    const appointmentButtons: PaginationButton[] = [];
    
    for (let i = 0; i < appointments.length; i++) {
      const appointment = appointments[i];
      const appointmentDate = new Date(appointment.admission_date);
      const formattedDate = DateTimeHelper.formatDateDisplay(appointmentDate);
      const formattedTime = appointmentDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      const buttonText = `üìÖ ${formattedDate} –≤ ${formattedTime}\nüë®‚Äç‚öïÔ∏è –í—Ä–∞—á ID: ${appointment.user_id}`;
      
      appointmentButtons.push({
        text: buttonText,
        callbackData: `move_appointment_${appointment.id}`
      });
    }

    const message = `
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${session.client?.first_name} ${session.client?.last_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${session.phone}

<b>–®–∞–≥ 2/6: –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞</b>

–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${appointments.length}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏:`;

    await PaginationHelper.sendPaginatedMessage(
      ctx,
      message,
      appointmentButtons,
      currentPage,
      {
        itemsPerPage,
        showPageNumbers: true,
        showNavigation: true,
        cancelButtonText: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        cancelCallbackData: 'cancel_move_appointment'
      }
    );
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showDateSelection(ctx: SceneContext, session: MoveAppointmentSession) {
    try {
      if (!session.selectedAppointment) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
      }

      const clinicIdStr = session.selectedAppointment.clinic_id;
      const clinicId = typeof clinicIdStr === 'string' ? parseInt(clinicIdStr) : clinicIdStr;
      
      if (isNaN(clinicId)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–Ω–∏–∫–∏');
        return;
      }
      
      const availableDates = await this.crmService.getAvailableDates(14, clinicId);
      const dateSlots: DateSlot[] = availableDates.map(dateInfo => ({
        date: dateInfo.date,
        displayName: DateTimeHelper.formatDateDisplay(new Date(dateInfo.date)),
        availableSlots: 9 - dateInfo.occupiedSlots.length,
        totalSlots: 9
      }));

      const dateButtons = DateTimeHelper.createDateButtons(dateSlots);
      const currentPage = session.currentDatePage || 1;

      const oldDate = new Date(session.selectedAppointment.admission_date);
      const formattedOldDate = DateTimeHelper.formatDateDisplay(oldDate);
      const formattedOldTime = oldDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      const message = `
‚úÖ <b>–í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å:</b> ${formattedOldDate} –≤ ${formattedOldTime}

<b>–®–∞–≥ 3/6: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:`;

      await PaginationHelper.sendPaginatedMessage(
        ctx,
        message,
        dateButtons,
        currentPage,
        {
          itemsPerPage: 5,
          showPageNumbers: true,
          showNavigation: true,
          cancelButtonText: '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
          cancelCallbackData: 'back_to_appointments'
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showTimeSelection(ctx: SceneContext, session: MoveAppointmentSession) {
    try {
      if (!session.newDate) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
      }

      if (!session.selectedAppointment) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
      }

      const clinicIdStr = session.selectedAppointment.clinic_id;
      const clinicId = typeof clinicIdStr === 'string' ? parseInt(clinicIdStr) : clinicIdStr;
      
      if (isNaN(clinicId)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–Ω–∏–∫–∏');
        return;
      }
      
      const occupiedSlots = await this.crmService.getOccupiedTimeSlots(session.newDate, clinicId);
      const timeSlots = DateTimeHelper.generateTimeSlots(session.newDate, occupiedSlots);
      const timeButtons = DateTimeHelper.createTimeButtons(timeSlots);
      const currentPage = session.currentTimePage || 1;

      const dateDisplay = DateTimeHelper.formatDateDisplay(new Date(session.newDate));

      const message = `
‚úÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> ${dateDisplay}

<b>–®–∞–≥ 4/6: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:`;

      await PaginationHelper.sendPaginatedMessage(
        ctx,
        message,
        timeButtons,
        currentPage,
        {
          itemsPerPage: 6,
          showPageNumbers: true,
          showNavigation: true,
          cancelButtonText: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ',
          cancelCallbackData: 'back_to_date'
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
   */
  private async showConfirmation(ctx: SceneContext, session: MoveAppointmentSession) {
    if (!session.selectedAppointment || !session.newDate || !session.newTime) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã');
      return;
    }

    const oldDate = new Date(session.selectedAppointment.admission_date);
    const formattedOldDate = DateTimeHelper.formatDateDisplay(oldDate);
    const formattedOldTime = oldDate.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    const newDateObj = new Date(session.newDate);
    const formattedNewDate = DateTimeHelper.formatDateDisplay(newDateObj);

    await ctx.replyWithHTML(`
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏</b>

<b>–®–∞–≥ 5/6: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å</b>

üìã <b>–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:</b>
üÜî <b>ID:</b> ${session.selectedAppointment.id}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedOldDate}
üïê <b>–í—Ä–µ–º—è:</b> ${formattedOldTime}

üìã <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:</b>
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedNewDate}
üïê <b>–í—Ä–µ–º—è:</b> ${session.newTime}

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å?`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', 'confirm_move_appointment')],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏', 'back_to_time')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_move_appointment')]
      ])
    );
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
   */
  private async moveAppointment(ctx: SceneContext, session: MoveAppointmentSession) {
    if (!session.selectedAppointmentId || !session.newDate || !session.newTime) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã');
      return;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞
      const start = `${session.newDate} ${session.newTime}:00`;
      const durationMinutesRaw = session.selectedAppointment?.admission_length;
      const durationMinutes = Number.parseInt((durationMinutesRaw || '30').toString(), 10);
      const endDateObj = new Date(start.replace(' ', 'T'));
      endDateObj.setMinutes(endDateObj.getMinutes() + (Number.isFinite(durationMinutes) ? durationMinutes : 30));
      const pad = (n: number) => n.toString().padStart(2, '0');
      const end = `${endDateObj.getFullYear()}-${pad(endDateObj.getMonth() + 1)}-${pad(endDateObj.getDate())} ${pad(endDateObj.getHours())}:${pad(endDateObj.getMinutes())}:00`;

      const clinicIdStr = session.selectedAppointment!.clinic_id;
      const clinicId = typeof clinicIdStr === 'string' ? parseInt(clinicIdStr) : clinicIdStr;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ CRM API (–ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–∏–µ–º–∞)
      const result = await this.crmService.rescheduleAppointment(
        session.selectedAppointmentId,
        clinicId,
        start,
        end
      );
      
      if (result && !result.error) {
        const oldDate = new Date(session.selectedAppointment!.admission_date);
        const formattedOldDate = DateTimeHelper.formatDateDisplay(oldDate);
        const formattedOldTime = oldDate.toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });

        const newDateObj = new Date(session.newDate);
        const formattedNewDate = DateTimeHelper.formatDateDisplay(newDateObj);

        await ctx.replyWithHTML(`
‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!</b>

üìã <b>–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:</b>
üÜî <b>ID:</b> ${session.selectedAppointment!.id}

üìã <b>–°:</b>
üìÖ ${formattedOldDate} –≤ ${formattedOldTime}

üìã <b>–ù–∞:</b>
üìÖ ${formattedNewDate} –≤ ${session.newTime}

–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø–∏—Å–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å', 'move_another_appointment')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      } else {
        await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏</b>

${result?.error || result?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'}`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'back_to_time')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏</b>

${errorMessage}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'back_to_time')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      );
    }
    
    await ctx.scene.leave();
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏');
    await ctx.scene.leave();
  }
}

