import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, On, Command, Hears } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';

import { addCancelButton, handleCancelButton } from '../helpers/scene.helper';
import { PaginationHelper, PaginationButton } from '../helpers/pagination.helper';
import { DateTimeHelper, DateSlot, TimeSlot } from '../helpers/date-time.helper';
import { CrmService } from '../../crm/services/crm.service';
import { AppointmentService } from '../../crm/services/appointments.service';
import { ClientService } from '../../crm/services/client.service';
import { Admission } from '@common/entities/admission.entity';
import { Client } from '@common/entities/client.entity';

interface CancelAppointmentSession {
  step: 'phone' | 'phone_input' | 'select_appointment' | 'confirm_cancel';
  phone?: string;
  client?: any;
  appointments?: Admission[];
  selectedAppointmentId?: string;
  currentPage?: number;
}

@Injectable()
@Scene('cancel_appointment')
export class CancelAppointmentScene {
  constructor(
    private readonly crmService: CrmService,
    private readonly appointmentService: AppointmentService,
    private readonly clientService: ClientService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['cancelAppointment']) {
      ctx.session['cancelAppointment'] = {} as CancelAppointmentSession;
    }
    
    const session = ctx.session['cancelAppointment'] as CancelAppointmentSession;
    session.step = 'phone';
    
    await ctx.replyWithHTML(`
üóëÔ∏è <b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º</b>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.

<b>–®–∞–≥ 1/3: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_cancel_appointment')]
      ])
    );
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['cancelAppointment']) {
      ctx.session['cancelAppointment'] = {} as CancelAppointmentSession;
    }
    
    const session = ctx.session['cancelAppointment'] as CancelAppointmentSession;
    const text = (ctx.message as any).text;
    
    if(text === '/exit') {
      await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏');
      await ctx.scene.leave();
      return;
    }

    switch (session.step) {
      case 'phone':
      case 'phone_input':
        session.phone = text;
        await this.findClientAndAppointments(ctx, session);
        break;
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;
    
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session['cancelAppointment']) {
      ctx.session['cancelAppointment'] = {} as CancelAppointmentSession;
    }
    
    const session = ctx.session['cancelAppointment'] as CancelAppointmentSession;
    
    if (callbackData === 'cancel_cancel_appointment') {
      await ctx.reply('‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      await ctx.scene.leave();
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
    if (PaginationHelper.isPageCallback(callbackData)) {
      const pageNumber = PaginationHelper.parsePageCallback(callbackData);
      if (pageNumber) {
        session.currentPage = pageNumber;
        await this.showAppointmentsList(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if (callbackData.startsWith('cancel_appointment_')) {
      const appointmentId = callbackData.replace('cancel_appointment_', '');
      session.selectedAppointmentId = appointmentId;
      session.step = 'confirm_cancel';
      await this.showConfirmation(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
    if (callbackData === 'confirm_cancel_appointment') {
      await this.cancelAppointment(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (callbackData === 'back_to_appointments') {
      session.step = 'select_appointment';
      await this.showAppointmentsList(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å–∏
    if (callbackData === 'cancel_another_appointment') {
      await ctx.reply('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π...');
      session.step = 'select_appointment';
      session.selectedAppointmentId = undefined;
      await this.showAppointmentsList(ctx, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    if (callbackData === 'retry_cancel') {
      if (session.selectedAppointmentId) {
        await this.showConfirmation(ctx, session);
        return;
      } else {
        await ctx.reply('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø–∏—Å–∫–∞.');
        await this.showAppointmentsList(ctx, session);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
    if (callbackData === 'retry_search') {
      await ctx.replyWithHTML(`
<b>–®–∞–≥ 1/3: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (callbackData === 'try_another_phone') {
      await ctx.replyWithHTML(`
<b>–®–∞–≥ 1/3: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å.

–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX`);
      session.step = 'phone_input';
      return;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∑–∞–ø–∏—Å–∏
   */
  private async findClientAndAppointments(ctx: SceneContext, session: CancelAppointmentSession) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const clientResult = await this.clientService.getClinetByPhone(session.phone!);      
      if (!clientResult || !(clientResult as any).data || !(clientResult as any).data.client || (clientResult as any).data.client.length === 0) {
        await ctx.replyWithHTML(`
‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${session.phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_cancel_appointment')]
          ])
        );
        return;
      }

      session.client = (clientResult as any).data.client[0];
      const clientId = session.client?.id || session.client?.client_id;
      const crmClientId = typeof clientId === 'number' ? clientId : parseInt(clientId);
      
      if (isNaN(crmClientId)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const appointments = await this.appointmentService.findAppointmentForUser(crmClientId, 1);
      
      if (!appointments || appointments.length === 0) {
        await ctx.replyWithHTML(`
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:</b> ${session.client?.first_name} ${session.client?.last_name}

‚ùå <b>–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º.

–í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'try_another_phone')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_cancel_appointment')]
          ])
        );
        return;
      }

      session.appointments = appointments;
      session.step = 'select_appointment';
      await this.showAppointmentsList(ctx, session);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å–µ–π:', error);
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_search')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_cancel_appointment')]
        ])
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async showAppointmentsList(ctx: SceneContext, session: CancelAppointmentSession) {
    if (!session.appointments || session.appointments.length === 0) {
      await ctx.reply('‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const appointments = session.appointments;
    const currentPage = session.currentPage || 1;
    const itemsPerPage = 3;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π
    const appointmentButtons: PaginationButton[] = [];
    
    for (let i = 0; i < appointments.length; i++) {
      const appointment = appointments[i];
      const appointmentDate = new Date(appointment.admission_date);
      const formattedDate = DateTimeHelper.formatDateDisplay(appointmentDate);
      const formattedTime = appointmentDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      const buttonText = `üìÖ ${formattedDate} –≤ ${formattedTime}\nüë®‚Äç‚öïÔ∏è –í—Ä–∞—á ID: ${appointment.user_id}`;
      
      appointmentButtons.push({
        text: buttonText,
        callbackData: `cancel_appointment_${appointment.id}`
      });
    }

    const message = `
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${session.client?.first_name} ${session.client?.last_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${session.phone}

<b>–®–∞–≥ 2/3: –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã</b>

–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${appointments.length}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:`;

    await PaginationHelper.sendPaginatedMessage(
      ctx,
      message,
      appointmentButtons,
      currentPage,
      {
        itemsPerPage,
        showPageNumbers: true,
        showNavigation: true,
        cancelButtonText: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        cancelCallbackData: 'cancel_cancel_appointment'
      }
    );
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
   */
  private async showConfirmation(ctx: SceneContext, session: CancelAppointmentSession) {
    if (!session.appointments || !session.selectedAppointmentId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
      return;
    }

    const selectedAppointment = session.appointments.find(
      app => app.id.toString() === session.selectedAppointmentId
    );

    if (!selectedAppointment) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const appointmentDate = new Date(selectedAppointment.admission_date);
    const formattedDate = DateTimeHelper.formatDateDisplay(appointmentDate);
    const formattedTime = appointmentDate.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    await ctx.replyWithHTML(`
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏</b>

<b>–®–∞–≥ 3/3: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>
üÜî <b>ID –∑–∞–ø–∏—Å–∏:</b> ${selectedAppointment.id}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üïê <b>–í—Ä–µ–º—è:</b> ${formattedTime}
üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á ID:</b> ${selectedAppointment.user_id}
üè• <b>–ö–ª–∏–Ω–∏–∫–∞ ID:</b> ${selectedAppointment.clinic_id}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?`, 
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'confirm_cancel_appointment')],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_appointments')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_cancel_appointment')]
      ])
    );
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
   */
  private async cancelAppointment(ctx: SceneContext, session: CancelAppointmentSession) {
    if (!session.selectedAppointmentId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
      return;
    }

    try {
      // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ CRM API
      const result = await this.crmService.chanelAppointment(session.selectedAppointmentId);
      
      if (result && !result.error && result.data) {
        const selectedAppointment = session.appointments?.find(
          app => app.id.toString() === session.selectedAppointmentId
        );

        if (selectedAppointment) {
          const appointmentDate = new Date(selectedAppointment.admission_date);
          const formattedDate = DateTimeHelper.formatDateDisplay(appointmentDate);
          const formattedTime = appointmentDate.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });

          await ctx.replyWithHTML(`
‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>

üìã <b>–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:</b>
üÜî <b>ID:</b> ${selectedAppointment.id}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üïê <b>–í—Ä–µ–º—è:</b> ${formattedTime}
üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á ID:</b> ${selectedAppointment.user_id}

–ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø–∏—Å–∏, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.`, 
            Markup.inlineKeyboard([
              [Markup.button.callback('üîÑ –û—Ç–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å', 'cancel_another_appointment')],
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ])
          );
        }
      } else {
        await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏</b>

${result?.error || result?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'}`, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_cancel')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        );
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
      await ctx.replyWithHTML(`
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏</b>

${errorMessage}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'retry_cancel')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      );
    }
    
    await ctx.scene.leave();
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.replyWithHTML('–í—ã—Ö–æ–¥ –∏–∑ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏');
    await ctx.scene.leave();
  }
}
