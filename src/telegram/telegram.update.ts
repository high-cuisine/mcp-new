import { Ctx, On, Update, Action, Start, Command } from "nestjs-telegraf";
import { SceneContext } from "telegraf/typings/scenes";
import { TelegramService } from "./servises/telegram.service";


@Update()
export class BotUpdate {
    private readonly adminId = '1042650482';

    constructor(
        private readonly telegramService: TelegramService,
       
    ) {}

    @Start()
    async onStart(@Ctx() ctx: SceneContext) {
        console.log('Start received:', ctx.message);
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ /create_appointment');
    }

    // @Command('start_whatsapp')
    // async startWhatsApp(@Ctx() ctx: SceneContext) {
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    //     if (ctx.from?.id?.toString() !== this.adminId) {
    //         await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    //         return;
    //     }

    //     try {
    //         await ctx.reply('üîÑ –ó–∞–ø—É—Å–∫–∞—é WhatsApp –∫–ª–∏–µ–Ω—Ç...');
            
    //         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    //         if (this.whatsappService.isClientConnected()) {
    //             await ctx.reply('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    //             return;
    //         }

    //         // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    //         await this.whatsappService.startClient();
    //         await ctx.reply('üöÄ WhatsApp –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω! QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.');
            
    //     } catch (error) {
    //         console.error('Error starting WhatsApp:', error);
    //         await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    //     }
    // }

    // @Command('stop_whatsapp')
    // async stopWhatsApp(@Ctx() ctx: SceneContext) {
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    //     if (ctx.from?.id?.toString() !== this.adminId) {
    //         await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    //         return;
    //     }

    //     try {
    //         await ctx.reply('üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é WhatsApp –∫–ª–∏–µ–Ω—Ç...');
    //         await this.whatsappService.stopClient();
    //         await ctx.reply('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
    //     } catch (error) {
    //         console.error('Error stopping WhatsApp:', error);
    //         await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    //     }
    // }

    // @Command('whatsapp_status')
    // async whatsappStatus(@Ctx() ctx: SceneContext) {
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    //     if (ctx.from?.id?.toString() !== this.adminId) {
    //         await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    //         return;
    //     }

    //     const status = this.whatsappService.getClientInfo();
    //     const statusText = status.isConnected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω';
        
    //     await ctx.reply(`üìä –°—Ç–∞—Ç—É—Å WhatsApp –∫–ª–∏–µ–Ω—Ç–∞: ${statusText}`);
    // }

    // @Command('restart_whatsapp')
    // async restartWhatsApp(@Ctx() ctx: SceneContext) {
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    //     if (ctx.from?.id?.toString() !== this.adminId) {
    //         await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    //         return;
    //     }

    //     try {
    //         await ctx.reply('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é WhatsApp –∫–ª–∏–µ–Ω—Ç...');
    //         await this.whatsappService.stopClient();
    //         await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    //         await this.whatsappService.startClient();
    //         await ctx.reply('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
            
    //     } catch (error) {
    //         console.error('Error restarting WhatsApp:', error);
    //         await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    //     }
    // }
    
    @On('message')
    async onMessage(@Ctx() ctx: SceneContext) {
        console.log('Message received:', ctx.message);
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if ((ctx.scene as any)?.current) {
            return;
        }
        await this.telegramService.sendMessage(ctx);
    }

    @On('callback_query')
    async onCallbackQuery(@Ctx() ctx: SceneContext) {
        console.log('Callback query received:', ctx.callbackQuery);
        // Callback queries –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ö
    }

    @Action('create_appointment')
    async createAppointment(@Ctx() ctx: SceneContext) {
        console.log('Starting create appointment scene');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        if (!ctx.session) {
            ctx.session = {};
        }
        ctx.session['createAppointment'] = {
            step: 'pet_name'
        };
        
        // –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
        return ctx.scene.enter('create_appointment');
    }

  

    
}